class DoublyLinkedListNode {
    constructor(nombre, apellido) {
        this.nombre = nombre;
        this.apellido = apellido;
        this.next = null;
        this.previous = null;
    }
}

class DoublyLinkedList {
    constructor() {
        this.head = null;
        this.tail = null;
    }

    searchByFirstLetter(targetLetter) {
        let currentNode = this.head;
        const foundNodes = [];

        while (currentNode !== null) {
            const firstInitial = currentNode.nombre[0];
            const lastInitial = currentNode.apellido[0];

            if (
                firstInitial.toLowerCase() === targetLetter.toLowerCase() ||
                lastInitial.toLowerCase() === targetLetter.toLowerCase()
            ) {
                foundNodes.push(currentNode);
            }

            currentNode = currentNode.next;
        }

        return foundNodes;
    }

    insertByFirstLetter(newNode) {
        if (this.head === null) {
            this.head = this.tail = newNode;
        } else {
            let currentNode = this.head;

            while (
                currentNode !== null &&
                currentNode.nombre.toLowerCase() < newNode.nombre.toLowerCase()
            ) {
                currentNode = currentNode.next;
            }

            if (currentNode === null) {
                this.tail.next = newNode;
                newNode.previous = this.tail;
                this.tail = newNode;
            } else if (currentNode === this.head) {
                newNode.next = this.head;
                this.head.previous = newNode;
                this.head = newNode;
            } else {
                const previousNode = currentNode.previous;
                previousNode.next = newNode;
                newNode.previous = previousNode;
                newNode.next = currentNode;
                currentNode.previous = newNode;
            }
        }
    }

    deleteByFirstLetter(letter) {
        let currentNode = this.head;

        while (currentNode !== null) {
            const nextNode = currentNode.next;

            if (currentNode.nombre[0].toLowerCase() === letter.toLowerCase()) {
                if (currentNode === this.head && currentNode === this.tail) {
                    this.head = this.tail = null;
                } else if (currentNode === this.head) {
                    this.head = currentNode.next;
                    if (this.head) this.head.previous = null;
                } else if (currentNode === this.tail) {
                    this.tail = currentNode.previous;
                    if (this.tail) this.tail.next = null;
                } else {
                    currentNode.previous.next = currentNode.next;
                    currentNode.next.previous = currentNode.previous;
                }
            }

            currentNode = nextNode;
        }
    }
ordenar() {
        if (!this.head || !this.head.next) return;

        let nodesArray = [];
        let current = this.head;

        while (current !== null) {
            nodesArray.push(current);
            current = current.next;
        }

        nodesArray.sort((a, b) => a.nombre.localeCompare(b.nombre));

        this.head = nodesArray[0];
        this.head.previous = null;

        for (let i = 0; i < nodesArray.length - 1; i++) {
            nodesArray[i].next = nodesArray[i + 1];
            nodesArray[i + 1].previous = nodesArray[i];
        }

        this.tail = nodesArray[nodesArray.length - 1];
        this.tail.next = null;
    }
}

const agenda = new DoublyLinkedList();

function agregarContacto() {
    const nombre = document.getElementById("nombre").value.trim();
    const apellido = document.getElementById("apellido").value.trim();

    if (!nombre || !apellido) {
        alert("Por favor, complete ambos campos.");
        return;
    }

    const nuevo = new DoublyLinkedListNode(nombre, apellido);
    agenda.insertByFirstLetter(nuevo);

    document.getElementById("nombre").value = "";
    document.getElementById("apellido").value = "";

    mostrarContactos();
}

function buscarPorInicial() {
    const letra = document.getElementById("letraBusqueda").value.trim();
    const lista = document.getElementById("listaContactos");
    lista.innerHTML = "";

    if (letra.length !== 1) {
        alert("Ingrese una sola letra.");
        return;
    }

    const resultados = agenda.searchByFirstLetter(letra);

    if (resultados.length === 0) {
        lista.innerHTML = "<li class='list-group-item'>No se encontraron contactos.</li>";
    } else {
        resultados.forEach(nodo => {
            const li = document.createElement("li");
            li.className = "list-group-item";
            li.textContent = `${nodo.nombre} ${nodo.apellido}`;
            lista.appendChild(li);
        });
    }
}
